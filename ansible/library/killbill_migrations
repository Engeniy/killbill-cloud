#!/usr/bin/ruby
# WANT_JSON

require 'json'
require 'pathname'
require 'set'

# Temporary -- https://github.com/killbill/killbill-cloud/issues/78
def with_captured_stdout
  require 'stringio'
  old_stdout = $stdout
  $stdout = StringIO.new
  yield
  JSON.parse($stdout.string.split("\n")[-1])
ensure
  $stdout = old_stdout
end

data = {}
File.open(ARGV[0]) do |fh|
  data = JSON.parse(fh.read())
end

unless data['kpm_path'].nil?
  ENV['GEM_PATH']="#{data['kpm_path']}/lib/vendor/ruby/2.2.0"
  Gem.clear_paths
end
require 'kpm'
require 'kpm/version'

kpm_facts = with_captured_stdout { KPM::System.new.information(data['bundles_dir'],
                                                               true,
                                                               data['config_file'],
                                                               data['kaui_web_path'],
                                                               data['killbill_web_path']) }


errors = []
all_migrations = {
  :killbill => {},
  :plugins => {
    :ruby => [],
    :java => []
  }
}

# Plugins migrations
kpm_facts['plugin_information'].each do |plugin_name, plugin_details|
  from_version_details = plugin_details['versions'].find { |v| v['is_default'] }
  if from_version_details.nil?
    errors << "#{plugin_name} disabled"
    next
  end

  to_version_details = data['kpm_yml']['killbill']['plugins'][plugin_details['type']].find { |p| p['name'] == plugin_details['plugin_key'] }
  if to_version_details.nil?
    # TODO Should we remove it? Upgrade it nonetheless?
    errors << "#{plugin_name} not scheduled to be installed"
    next
  end

  from_version = from_version_details['version']
  to_version = to_version_details['version']

  is_ruby = plugin_details['type'] == 'ruby'
  if is_ruby
    from_tag = "v#{from_version}"
    to_tag = to_version.nil? ? nil : "v#{to_version}"
  else
    from_tag = "#{plugin_details['artifact_id']}-#{from_version}"
    to_tag = to_version.nil? ? nil : "#{plugin_details['artifact_id']}-#{to_version}"
  end

  repository = "killbill-#{plugin_details['artifact_id']}"
  migrations_dir = KPM::Migrations.new(from_tag, to_tag, "killbill/#{repository}", data['gh_token']).save
  next if migrations_dir.nil?

  if is_ruby
    all_migrations[:plugins][:ruby] << {
      :from_tag => from_tag,
      :to_tag => to_tag,
      :table => "#{plugin_details['plugin_key']}_schema_migrations",
      :dir => migrations_dir
    }
  else
    all_migrations[:plugins][:java] << {
      :from_tag => from_tag,
      :to_tag => to_tag,
      :table => "#{plugin_details['plugin_key']}_schema_version",
      :dir => migrations_dir
    }
  end
end

# Core migrations
kb_from_version = kpm_facts['killbill_information']['killbill']['version']
if kb_from_version == 'not found'
  errors << "killbill version not found"
else
  kb_from_tag = "killbill-#{kb_from_version}"

  kb_to_version = data['kpm_yml']['killbill']['version']
  kb_to_tag = kb_to_version.nil? || kb_to_version == 'LATEST' ? nil : "killbill-#{kb_to_version}"

  migrations_dir = KPM::Migrations.new(kb_from_tag, kb_to_tag, "killbill/killbill", data['gh_token']).save

  all_migrations[:killbill] = {
    :from_tag => kb_from_tag,
    :to_tag => kb_to_tag,
    :table => 'schema_version',
    :dir => migrations_dir
    } unless migrations_dir.nil?
end

result = {
  'changed' => !(all_migrations[:killbill].empty? && all_migrations[:plugins][:ruby].empty? && all_migrations[:plugins][:java].empty?),
  'errors' => errors,
  'migrations' => all_migrations
}

print JSON.dump(result)
